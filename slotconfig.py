#!/usr/bin/python2
DEBUG = 0

ALWAYS =  0b0000
NEVER =   0b1000
ENCRYPT = 0b0100

DERIVE_TARGET =   0b0010
DERIVE_PARENT =   0b0011
DERIVE_AUTH_MAC = 0b1000

def gen_conf(SlotConfig=0, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=0, WriteKey=0, WriteConfig=0):
    if SlotConfig < 0 or SlotConfig > 0xf:
        print("Error: Invalid config: %d" % SlotConfig)
        exit(0)

    if ReadKey < 0 or ReadKey > 0xf:
        print("Error: Invalid ReadKey: %d" % ReadKey)
        exit(0)

    if SingleUse != 0 and SingleUse != 1:
        print("Error: Invalid SingleUse: %d" % SingleUse)
        exit(0)

    if EncryptedRead != 0 and EncryptedRead != 1:
        print("Error: Invalid EncryptedRead: %d" % EncryptedRead)
        exit(0)

    if IsSecret != 0 and IsSecret != 1:
        print("Error: Invalid IsSecret: %d" % IsSecret)
        exit(0)

    if WriteKey < 0 or WriteKey > 0xf:
        print("Error: Invalid WriteKey: %d" % WriteKey)
        exit(0)

    if WriteConfig < 0 or WriteConfig > 0xf:
        print("Error: Invalid WriteConfig: %d" % WriteConfig)
        exit(0)

    config_value =  hex(WriteConfig << 12 | WriteKey << 8 |
                IsSecret << 7 | EncryptedRead << 6 | SingleUse << 5 | CheckOnly << 4 | ReadKey)

    if DEBUG > 1:
        print("SlotConfig: %d" % SlotConfig)
        print("ReadKey: %d" % ReadKey)
        print("SingleUse: %d" % SingleUse)
        print("EncryptedRead: %d" % EncryptedRead)
        print("IsSecret: %d" % IsSecret)
        print("WriteKey: %d" % WriteKey)
        print("WriteConfig: %d" % WriteConfig)
    if DEBUG > 0:
        print("Key[%02d]: %s" % (SlotConfig, config_value))

    comment = "     /* SlotConfig[%d]: ReadKey=0x%02x, CheckOnly=%d, SingleUse=%d, EncryptedRead=%d, IsSecret=%d, WriteKey=0x%02x, WriteConfig=0x%02x */" % (SlotConfig, ReadKey, CheckOnly, SingleUse, EncryptedRead, IsSecret, WriteKey, WriteConfig)
    print comment
    return int(config_value, 16)


def SLOT_CONFIG_ADDR(slotnbr):
    addr = 0x5;
    if slotnbr % 2:
        slotnbr = slotnbr - 1
    slotnbr >>= 1
    return addr + slotnbr


def print_c_code(k_low, k_high, k_low_nbr, k_high_nbr):
    byte0 = k_low & 0xff;
    byte1 = k_low >> 8;
    byte2 = k_high & 0xff;
    byte3 = k_high >> 8;
    print("     { 0x%02x, {  0x%02x, 0x%02x,   0x%02x, 0x%02x } },\n" % (SLOT_CONFIG_ADDR(k_low_nbr), byte0, byte1, byte2, byte3))


def main():
    print("/* Generated by ATSHA204A slot config generator */")
    print("struct slot_config {")
    print("     uint8_t address;")
    print("     uint8_t value[4];")
    print("};\n")
    print("static struct slot_config slot_configs[] = {")

    # Mixing NERVER with various derive key alternatives
    k0 = gen_conf(0,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    k1 = gen_conf(1,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER|DERIVE_TARGET)
    print_c_code(k0, k1, 0, 1)

    k2 = gen_conf(2,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    k3 = gen_conf(3,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER|DERIVE_PARENT)
    print_c_code(k2, k3, 2, 3)

    k4 = gen_conf(4,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    k5 = gen_conf(5,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER|DERIVE_TARGET|DERIVE_AUTH_MAC)
    print_c_code(k4, k5, 4, 5)

    k6 = gen_conf(6,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    k7 = gen_conf(7,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER|DERIVE_PARENT|DERIVE_AUTH_MAC)
    print_c_code(k6, k7, 6, 7)

    # ---------

    # Mixing encryped read and allow key to be updated with encrypted writes
    k8 = gen_conf(8,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=8, WriteConfig=ENCRYPT)
    k9 = gen_conf(9,  ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=1, IsSecret=1, WriteKey=9, WriteConfig=ENCRYPT)
    print_c_code(k8, k9, 8, 9)

    # ---------

    # Fixed keys, not readable, not writable
    k10 = gen_conf(10, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    k11 = gen_conf(11, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=1, WriteKey=0, WriteConfig=NEVER)
    print_c_code(k10, k11, 10, 11)

    # ---------

    # Fully readable and writable, should not be used as keys
    k12 = gen_conf(12, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=0, WriteKey=0, WriteConfig=ALWAYS)
    k13 = gen_conf(13, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=0, WriteKey=0, WriteConfig=ALWAYS)
    print_c_code(k12, k13, 12, 13)

    # ---------

    # Fixed (non-writable), but readable key.
    k14 = gen_conf(14, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=0, WriteKey=0, WriteConfig=NEVER)
    k15 = gen_conf(15, ReadKey=0, CheckOnly=0, SingleUse=0, EncryptedRead=0, IsSecret=0, WriteKey=0, WriteConfig=NEVER)
    print_c_code(k14, k15, 14, 15)
    print("};")

if __name__ == "__main__":
    main()
